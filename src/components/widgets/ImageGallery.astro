---
import Image from '~/components/common/Image.astro';
import type { Hero as Props } from '~/types';
// ImageGallery.astro
interface GalleryImage {
  photo: string;
  title: string;
  alt: string;
  price: string;
  description: string;
  size: string;
}

interface Props {
  images: GalleryImage[];
}

const { images } = Astro.props;
---

<section id="works" class="w-full pb-32 scroll-pt-24">
  <div class="max-w-7xl px-6 lg:px-8 mx-auto duration-1000 delay-300 opacity-0s ease animate-fade-in-view">
    <div class="mx-auto mb-16 max-w-xl text-center">
      <h2 class="text-lg font-semibold leading-8 tracking-tight text-[#5BB4CC]">Work</h2>
      <p class="mt-2 text-3xl font-bold tracking-tight text-[#517994] sm:text-4xl">The Art</p>
    </div>
    <ul id="gallery" class="grid grid-cols-1 gap-8 md:grid-cols-2 xl:grid-cols-4">
      {
        images.map((image, index) => (
          <li class="space-y-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
            <Image
              src={image.photo}
              alt={image.alt}
              data-index={index + 1}
              width={480}
              class="object-cover  w-full h-auto bg-gray-200 rounded-2xl cursor-zoom-in aspect-[5/6] lg:aspect-[2/3] xl:aspect-[3/4]"
            />
            <div class="space-y-2">
              <div class="flex justify-between text-gray-900 text-sm">
                <h3 class="w-1/2 font-bold">{image.title}</h3>
                <p class="text-xs w-1/2 text-left ">{image.price}</p>
              </div>
              <div>
                <p class="text-gray-500 text-sm">{image.description}</p>
                <p class="text-gray-500 text-sm">{image.size}</p>
              </div>
            </div>
          </li>
        ))
      }
    </ul>
  </div>
</section>

<script>
  class ImageGallery {
    private imageGalleryOpened: boolean = false;
    private imageGalleryActiveUrl: string | null = null;
    private imageGalleryImageIndex: number | null = null;
    private gallery: HTMLElement;
    private modal: HTMLElement | null = null;

    constructor() {
      this.gallery = document.getElementById('gallery')!;
      this.initializeGallery();
      this.createModal();
      this.addKeyboardListeners();
    }

    private initializeGallery() {
      const images = this.gallery.querySelectorAll('img');
      images.forEach((img) => {
        img.addEventListener('click', (e) => this.imageGalleryOpen(e));
      });
    }

    private createModal() {
      this.modal = document.createElement('div');
      this.modal.className =
        'fixed inset-0 z-[99] hidden items-center justify-center bg-black bg-opacity-50  cursor-zoom-out';
      this.modal.innerHTML = `
      <div class="relative flex items-center justify-center w-5/6 xl:w-4/5 h-5/6">
        <div class="absolute left-0 flex items-center justify-center text-white translate-x-10 rounded-full cursor-pointer xl:-translate-x-24 2xl:-translate-x-32 bg-white/10 w-14 h-14 hover:bg-white/20">
          <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" /></svg>
        </div>
        <img class="object-contain p-12 object-center w-full h-full  cursor-zoom-out">
        <div class="absolute right-0 flex items-center justify-center text-white -translate-x-10 rounded-full cursor-pointer xl:translate-x-24 2xl:translate-x-32 bg-white/10 w-14 h-14 hover:bg-white/20">
          <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" /></svg>
        </div>
      </div>
    `;
      document.body.appendChild(this.modal);

      // Add event listeners for modal controls
      this.modal.querySelector('.left-0')?.addEventListener('click', () => this.imageGalleryPrev());
      this.modal.querySelector('.right-0')?.addEventListener('click', () => this.imageGalleryNext());
      this.modal.addEventListener('click', (e) => {
        if (e.target === this.modal) {
          this.imageGalleryClose();
        }
      });
    }

    private addKeyboardListeners() {
      document.addEventListener('keydown', (e) => {
        if (this.imageGalleryOpened) {
          if (e.key === 'Escape') this.imageGalleryClose();
          if (e.key === 'ArrowRight') this.imageGalleryNext();
          if (e.key === 'ArrowLeft') this.imageGalleryPrev();
        }
      });
    }

    private imageGalleryOpen(event: Event) {
      const target = event.target as HTMLImageElement;
      this.imageGalleryImageIndex = parseInt(target.dataset.index || '1');
      this.imageGalleryActiveUrl = target.src;
      this.imageGalleryOpened = true;
      this.modal!.classList.replace('hidden', 'flex');
      const modalImg = this.modal!.querySelector('img') as HTMLImageElement;
      modalImg.src = this.imageGalleryActiveUrl;
    }

    private imageGalleryClose() {
      this.imageGalleryOpened = false;
      this.modal!.classList.replace('flex', 'hidden');
      setTimeout(() => {
        this.imageGalleryActiveUrl = null;
      }, 300);
    }

    private imageGalleryNext() {
      const totalImages = this.gallery.querySelectorAll('img').length;
      this.imageGalleryImageIndex = this.imageGalleryImageIndex === totalImages ? 1 : this.imageGalleryImageIndex! + 1;
      this.updateModalImage();
    }

    private imageGalleryPrev() {
      const totalImages = this.gallery.querySelectorAll('img').length;
      this.imageGalleryImageIndex = this.imageGalleryImageIndex === 1 ? totalImages : this.imageGalleryImageIndex! - 1;
      this.updateModalImage();
    }

    private updateModalImage() {
      const nextImage = this.gallery.querySelector(`[data-index="${this.imageGalleryImageIndex}"]`) as HTMLImageElement;
      this.imageGalleryActiveUrl = nextImage.src;
      const modalImg = this.modal!.querySelector('img') as HTMLImageElement;
      modalImg.src = this.imageGalleryActiveUrl;
    }
  }

  // Initialize the gallery when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ImageGallery();
  });
</script>
